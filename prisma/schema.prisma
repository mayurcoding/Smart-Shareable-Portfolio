// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  visibility  Visibility @default(PRIVATE)
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings    Holding[]
  cash        Float     @default(0)
  insights    Insight[]
  shareToken  String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sharedAccess SharedPortfolioAccess[]
  accessLogs  TokenAccessLog[]
}

model Holding {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  ticker      String
  quantity    Float
  averagePrice Float?
  portfolioId String    @db.ObjectId
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Insight {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        InsightType
  title       String
  content     String
  portfolioId String    @db.ObjectId
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SharedPortfolioAccess {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId String    @db.ObjectId
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  viewerId    String?   @db.ObjectId
  viewerEmail String?
  viewerName  String?
  ipAddress   String?
  userAgent   String?
  firstAccess DateTime  @default(now())
  lastAccess  DateTime  @updatedAt
  accessCount Int       @default(1)
}

model TokenAccessLog {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId String    @db.ObjectId
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime  @default(now())
  viewerId    String?   @db.ObjectId
}

enum Visibility {
  PRIVATE
  PUBLIC
  SMART_SHARED
}

enum InsightType {
  PORTFOLIO_SUMMARY
  DIVERSIFICATION_ANALYSIS
  SECTOR_EXPOSURE
  RISK_ANALYSIS
  INVESTMENT_THESIS
  PERFORMANCE_ANALYSIS
} 